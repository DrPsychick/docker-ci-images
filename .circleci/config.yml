# Required ENV variables
# DOCKER_USER, DOCKER_PASS
version: 2.1
aliases:
  - &parameters
    buildx_url:
      default: https://github.com/docker/buildx/releases
      type: string
    buildx_version:
      default: 0.5.1
      type: string
    kubectl_url:
      default: https://dl.k8s.io/release
      type: string
    kubectl_version:
      default: 1.21.0
      type: string
    helm_url:
      default: https://get.helm.sh
      type: string
    helm_version:
      default: 3.5.4
      type: string
    ct_version:
      default: 3.3.1
      type: string
    kind_version:
      default: 0.10.0
      type: string
    platforms:
      default: linux/amd64
      type: string
    version:
      default: latest
      type: string
    repo:
      default: drpsychick
      type: string
    tag:
      default: latest
      type: string
  - &docker-dind
    - image: docker:dind
  - &build
    - checkout
    - setup_remote_docker:
        version: 20.10.2
    - run:
        name: Install buildx
        command: |
          apk add --no-cache curl
          mkdir -p ~/.docker/cli-plugins
          fileName="buildx-v<< parameters.buildx_version >>.linux-amd64"
          url="<< parameters.buildx_url >>/download/v<< parameters.buildx_version >>/${fileName}"
          curl -sSL -o ~/.docker/cli-plugins/docker-buildx $url
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker buildx install
    - run:
        name: Bootstrap buildx
        command: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker context create xbuilder
          docker buildx create xbuilder --name xbuilder --use
          docker buildx inspect --bootstrap
    - run:
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images
          for img in $(ls -1d *); do
            echo "Building << parameters.repo >>/$img:<< parameters.tag >> = << parameters.version >>"
            if [ "latest" = "<< parameters.version >>" ]; then

              # use default ARGs of image
              docker buildx build --progress plain --platform << parameters.platforms >> \
                --tag << parameters.repo >>/$img:<< parameters.tag >> --push ./$img/
            else

              # determine source version and target tag
              VERSION=<< parameters.version >>
              TAG=<< parameters.version >>-<< parameters.buildx_version >>
              if [ "$img" = "dind-buildx-helm" ]; then
                VERSION=$VERSION-<< parameters.buildx_version >>
                TAG=$TAG-<< parameters.kubectl_version >>-<< parameters.helm_version >>
              fi
              if [ "$img" = "dind-buildx-helm-kind" ]; then
                VERSION=$VERSION-<< parameters.buildx_version >>-<< parameters.kubectl_version >>-<< parameters.helm_version >>
                TAG=$TAG-<< parameters.kubectl_version >>-<< parameters.helm_version >>-<< parameters.kind_version >>
              fi

              docker buildx build --progress plain --platform << parameters.platforms >> \
                --build-arg VERSION=$VERSION \
                --build-arg BUILDX_VERSION=<< parameters.buildx_version >> \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --build-arg HELM_VERSION=<< parameters.helm_version >> \
                --build-arg CT_VERSION=<< parameters.ct_version >> \
                --build-arg KIND_VERSION=<< parameters.kind_version >> \
                --tag << parameters.repo >>/$img:$TAG --push ./$img/
            fi
          done

jobs:
  build:
    parameters: *parameters
    docker: *docker-dind
    resource_class: small
    steps: *build

workflows:
  version: 2
  chart-test:
    jobs:
      - build:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
      - build:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["20-dind"]
              buildx_version: ["0.5.1"]
              kubectl_version: ["1.20.4"]
              helm_version: ["3.5.0"]
      - build:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["19-dind"]
              buildx_version: ["0.5.1"]
              kubectl_version: ["1.19.4"]
              helm_version: ["3.4.2"]
