# Required ENV variables
# DOCKER_USER, DOCKER_PASS
version: 2.1
aliases:
  - &parameters
    version:
      default: latest
      type: string
    buildx_url:
      default: https://github.com/docker/buildx/releases
      type: string
    buildx_version:
      default: 0.5.1
      type: string
    kubectl_version:
      default: 1.21.0
      type: string
    helm_version:
      default: 3.5.4
      type: string
    ct_version:
      default: 3.3.1
      type: string
    kind_version:
      default: 0.10.0
      type: string
    platforms:
      default: linux/amd64
      type: string
    repo:
      default: drpsychick
      type: string
    tag:
      default: latest
      type: string
  - &docker-dind
    - image: docker:dind
  - &docker
    - image: docker
  - &buildx
    - checkout
    - setup_remote_docker:
        version: 20.10.2
    - run:
        name: Install buildx
        command: |
          apk add --no-cache curl
          mkdir -p ~/.docker/cli-plugins
          fileName="buildx-v<< parameters.buildx_version >>.linux-amd64"
          url="<< parameters.buildx_url >>/download/v<< parameters.buildx_version >>/${fileName}"
          curl -sSL -o ~/.docker/cli-plugins/docker-buildx $url
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker buildx install
    - run:
        name: Bootstrap buildx
        command: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker context create xbuilder
          docker buildx create xbuilder --name xbuilder --use
          docker buildx inspect --bootstrap
    - run:
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images
          for img in $(ls -1d *); do
            if [ "latest" = "<< parameters.version >>" ]; then

              # use default ARGs of image
              echo "Building << parameters.repo >>/$img:<< parameters.tag >>"
              docker buildx build --progress plain --platform << parameters.platforms >> \
                --tag << parameters.repo >>/$img:<< parameters.tag >> --push ./$img/
            else

              # determine source version and target tag
              VERSION=<< parameters.version >>
              TAG=<< parameters.version >>
              if [ "$img" = "dind-buildx-helm" -o "$img" = "dind-helm" ]; then
                VERSION=<< parameters.version >>
                TAG=<< parameters.kubectl_version >>
              fi
              if [ "$img" = "dind-buildx-helm-kind" -o "$img" = "dind-helm-kind" ]; then
                VERSION=<< parameters.kubectl_version >>
                TAG=<< parameters.kind_version >>
              fi

              echo "Building << parameters.repo >>/$img:$TAG based on $VERSION"
              docker buildx build --progress plain --platform << parameters.platforms >> \
                --build-arg VERSION=$VERSION \
                --build-arg BUILDX_VERSION=<< parameters.buildx_version >> \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --build-arg HELM_VERSION=<< parameters.helm_version >> \
                --build-arg CT_VERSION=<< parameters.ct_version >> \
                --build-arg KIND_VERSION=<< parameters.kind_version >> \
                --tag << parameters.repo >>/$img:$TAG --push ./$img/
            fi
          done

  - &build86
    - checkout
    - run:
        # plain docker build x86 without cross-platform
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images_x86
          for img in $(ls -1d *); do
            if [ "latest" = "<< parameters.version >>" ]; then

              # use default ARGs of image
              echo "Building << parameters.repo >>/$img:<< parameters.tag >>"
              docker build --progress plain \
                --tag << parameters.repo >>/$img:<< parameters.tag >> --push ./$img/
            else

              # determine source version and target tag
              VERSION=<< parameters.argocd_version >>
              TAG=<< parameters.argocd_version >>

              echo "Building << parameters.repo >>/$img:$TAG based on $VERSION"
              docker  build --progress plain \
                --build-arg ARGOCD_VERSION=$ARGOCD_VERSION \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --tag << parameters.repo >>/$img:$TAG --push ./$img/
            fi
          done
jobs:
  buildx:
    parameters: *parameters
    docker: *docker-dind
    resource_class: small
    steps: *buildx
  build86:
    parameters: *parameters
    docker: *docker
    resource_class: small
    steps: *build86

workflows:
  version: 2
  build-images:
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["20-dind"]
              kubectl_version: ["1.20.4"]
              helm_version: ["3.5.0"]
              kind_version: [ "0.10.0" ]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["19-dind"]
              kubectl_version: ["1.19.4"]
              helm_version: ["3.4.2"]
              kind_version: ["0.9.0"]
      - build86:
          matrix:
            parameters:
              argocd_version: ["latest", "2", "2.2.1"]
              kubectl_version: ["stable", "1.23.1", "1.20.4"]

  # build 'latest' weekly
  weekly:
    triggers:
      - schedule:
          # mondays, 6:03 am, UTC
          cron: "3 6 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
  # build other tags monthly
  monthly:
    triggers:
      - schedule:
          # first day of month, 5:03 am, UTC
          cron: "3 5 1 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["20-dind"]
              kubectl_version: ["1.20.4"]
              helm_version: ["3.5.0"]
              kind_version: [ "0.10.0" ]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["19-dind"]
              kubectl_version: ["1.19.4"]
              helm_version: ["3.4.2"]
              kind_version: ["0.9.0"]
